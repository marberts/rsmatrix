
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rsmatrix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rsmatrix')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("rs_matrix")
> ### * rs_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rs_matrix
> ### Title: Shiller's repeat-sales matrices
> ### Aliases: rs_matrix
> 
> ### ** Examples
> 
> # Make some data
> x <- data.frame(
+   date = c(3, 2, 3, 2, 3, 3),
+   date_prev = c(1, 1, 2, 1, 2, 1),
+   price = 6:1,
+   price_prev = 1
+ )
> 
> # Calculate matrices
> mat <- with(x, rs_matrix(date, date_prev, price, price_prev))
> Z <- mat("Z") # Z matrix
> X <- mat("X") # X matrix
> y <- mat("y") # y vector
> Y <- mat("Y") # Y vector
> 
> # Calculate the GRS index in Bailey, Muth, and Nourse (1963)
> b <- solve(crossprod(Z), crossprod(Z, y))[, 1]
> # or b <- qr.coef(qr(Z), y)
> (grs <- exp(b) * 100)
       2        3 
235.0755 403.5654 
> 
> # Standard errors
> vcov <- rs_var(y - Z %*% b, Z)
> sqrt(diag(vcov)) * grs # delta method
       2        3 
111.0797 257.6581 
> 
> # Calculate the ARS index in Shiller (1991)
> b <- solve(crossprod(Z, X), crossprod(Z, Y))[, 1]
> # or b <- qr.coef(qr(crossprod(Z, X)), crossprod(Z, Y))
> (ars <- 100 / b)
       2        3 
310.5263 491.6667 
> 
> # Standard errors
> vcov <- rs_var(Y - X %*% b, Z, X)
> sqrt(diag(vcov)) * ars^2 / 100 # delta method
       2        3 
100.0316 232.3111 
> 
> # Works with grouped data
> x <- data.frame(
+   date = c(3, 2, 3, 2),
+   date_prev = c(2, 1, 2, 1),
+   price = 4:1,
+   price_prev = 1,
+   group = c("a", "a", "b", "b")
+ )
> 
> mat <- with(x, rs_matrix(date, date_prev, price, price_prev, group))
> b <- solve(crossprod(mat("Z"), mat("X")), crossprod(mat("Z"), mat("Y")))[, 1]
> 100 / b
 a.2  b.2  a.3  b.3 
 300  100 1200  200 
> 
> 
> 
> 
> cleanEx()
> nameEx("rs_pairs")
> ### * rs_pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rs_pairs
> ### Title: Sales pairs
> ### Aliases: rs_pairs
> 
> ### ** Examples
> 
> # Make sales pairs
> x <- data.frame(
+   id = c(1, 1, 1, 3, 2, 2, 3, 3),
+   date = c(1, 2, 3, 2, 1, 3, 4, 1),
+   price = c(1, 3, 2, 3, 1, 1, 1, 2)
+ )
> 
> pairs <- rs_pairs(x$date, x$id)
> 
> x[c("date_prev", "price_prev")] <- x[c("date", "price")][pairs, ]
> 
> x
  id date price date_prev price_prev
1  1    1     1         1          1
2  1    2     3         1          1
3  1    3     2         2          3
4  3    2     3         1          2
5  2    1     1         1          1
6  2    3     1         1          1
7  3    4     1         2          3
8  3    1     2         1          2
> 
> 
> 
> 
> cleanEx()
> nameEx("rs_var")
> ### * rs_var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rs_var
> ### Title: Robust variance matrix for repeat-sales indexes
> ### Aliases: rs_var
> 
> ### ** Examples
> 
> # Makes some groups in mtcars
> mtcars$clust <- letters[1:4]
> 
> # Matrices for regression
> x <- model.matrix(~ cyl + disp, mtcars)
> y <- matrix(mtcars$mpg)
> 
> # Regression coefficients
> b <- solve(crossprod(x), crossprod(x, y))
> 
> # Residuals
> r <- y - x %*% b
> 
> # Robust variance matrix
> vcov <- rs_var(r, x, ids = mtcars$clust)
> 
> ## Not run: 
> ##D # Same as plm
> ##D library(plm)
> ##D mdl <- plm(mpg ~ cyl + disp, mtcars, model = "pooling", index = "clust")
> ##D vcov2 <- vcovHC(mdl, type = "sss", cluster = "group")
> ##D vcov - vcov2
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.978 0.14 2.139 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
